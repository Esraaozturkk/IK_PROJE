// <auto-generated />
using System;
using IK_PROJE.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IK_PROJE.DataAccess.Migrations
{
    [DbContext(typeof(SqlDbContext))]
    [Migration("20241226230526_mig1")]
    partial class mig1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CertificateResume", b =>
                {
                    b.Property<int>("certificatesId")
                        .HasColumnType("int");

                    b.Property<int>("resumesId")
                        .HasColumnType("int");

                    b.HasKey("certificatesId", "resumesId");

                    b.HasIndex("resumesId");

                    b.ToTable("CertificateResume");
                });

            modelBuilder.Entity("IK_PROJE.Entity.Entities.Concrete.Application", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("JobPostId")
                        .HasColumnType("int");

                    b.Property<int>("ResumeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("JobPostId");

                    b.HasIndex("ResumeId");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("IK_PROJE.Entity.Entities.Concrete.Certificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Adi")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateOnly>("AlındığıTarih")
                        .HasColumnType("date");

                    b.Property<string>("Kurum")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("Certificate");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Adi = "Python programlama sertifikası",
                            AlındığıTarih = new DateOnly(2024, 12, 22),
                            Kurum = "Cisco Networking Academy "
                        });
                });

            modelBuilder.Entity("IK_PROJE.Entity.Entities.Concrete.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyName")
                        .IsUnique();

                    b.HasIndex("Id");

                    b.ToTable("Company");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyName = "İş Bankası"
                        },
                        new
                        {
                            Id = 2,
                            CompanyName = "TEV"
                        },
                        new
                        {
                            Id = 3,
                            CompanyName = "Yapıkredi"
                        },
                        new
                        {
                            Id = 4,
                            CompanyName = "ZiraatBankası"
                        },
                        new
                        {
                            Id = 5,
                            CompanyName = "Akbank"
                        },
                        new
                        {
                            Id = 6,
                            CompanyName = "Baykar"
                        },
                        new
                        {
                            Id = 7,
                            CompanyName = "Vodafone"
                        });
                });

            modelBuilder.Entity("IK_PROJE.Entity.Entities.Concrete.JobPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Requirements")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("Salary")
                        .HasMaxLength(500)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("Id");

                    b.ToTable("JobPosts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyId = 1,
                            CreatedDate = new DateOnly(2024, 12, 27),
                            Description = "C# ile eklenti geliştirme ve JavaScript ile kullanıcı arayüzü kodlama deneyimi olan",
                            Requirements = "Tercihen Web kaynakları, PowerApp uygulamaları ve PowerBI raporları geliştirmede deneyimli olan.",
                            Salary = 30000.00m,
                            Title = "Bilgisayar Mühendisi"
                        });
                });

            modelBuilder.Entity("IK_PROJE.Entity.Entities.Concrete.MyUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("TelNo")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("TelNo")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "esra@gmail.com",
                            Name = "Esra",
                            Password = "esra12",
                            RoleId = 1,
                            Surname = "Öztürk",
                            TelNo = "05031234266"
                        },
                        new
                        {
                            Id = 2,
                            Email = "emre@gmail.com",
                            Name = "emre",
                            Password = "qweasd",
                            RoleId = 2,
                            Surname = "andac",
                            TelNo = "05431234266"
                        });
                });

            modelBuilder.Entity("IK_PROJE.Entity.Entities.Concrete.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Açıklama")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("Project");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Açıklama = "C# ile İnsan Kaynakları alanında sadece adminin iş ilanı atacağı bir proje",
                            Name = "C# ile IK projesi"
                        });
                });

            modelBuilder.Entity("IK_PROJE.Entity.Entities.Concrete.Reference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("KurumAdi")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("ReferansAdi")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("Reference");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            KurumAdi = "Bahçeşehir Üniversitesi Wissen Akademie",
                            ReferansAdi = "Adnan Ercan Öztürk"
                        });
                });

            modelBuilder.Entity("IK_PROJE.Entity.Entities.Concrete.Resume", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Resume");
                });

            modelBuilder.Entity("IK_PROJE.Entity.Entities.Concrete.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleName = "Yonetici"
                        },
                        new
                        {
                            Id = 2,
                            RoleName = "Kullanici"
                        });
                });

            modelBuilder.Entity("IK_PROJE.Entity.Entities.Concrete.School", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BolumAdı")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MezuniyetTürü")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OkulAdı")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("School");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BolumAdı = "Bilgisayar Mühendisliği",
                            MezuniyetTürü = "Lisans ",
                            OkulAdı = "Uludağ Üniversitesi"
                        });
                });

            modelBuilder.Entity("IK_PROJE.Entity.Entities.Concrete.Skills", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Adi")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Adi = "CRM SDK"
                        },
                        new
                        {
                            Id = 2,
                            Adi = "C#"
                        },
                        new
                        {
                            Id = 3,
                            Adi = "ASP.NET"
                        },
                        new
                        {
                            Id = 4,
                            Adi = "SQL Database"
                        });
                });

            modelBuilder.Entity("ProjectResume", b =>
                {
                    b.Property<int>("projectsId")
                        .HasColumnType("int");

                    b.Property<int>("resumesId")
                        .HasColumnType("int");

                    b.HasKey("projectsId", "resumesId");

                    b.HasIndex("resumesId");

                    b.ToTable("ProjectResume");
                });

            modelBuilder.Entity("ReferenceResume", b =>
                {
                    b.Property<int>("referencesId")
                        .HasColumnType("int");

                    b.Property<int>("resumesId")
                        .HasColumnType("int");

                    b.HasKey("referencesId", "resumesId");

                    b.HasIndex("resumesId");

                    b.ToTable("ReferenceResume");
                });

            modelBuilder.Entity("ResumeSchool", b =>
                {
                    b.Property<int>("resumesId")
                        .HasColumnType("int");

                    b.Property<int>("schoolsId")
                        .HasColumnType("int");

                    b.HasKey("resumesId", "schoolsId");

                    b.HasIndex("schoolsId");

                    b.ToTable("ResumeSchool");
                });

            modelBuilder.Entity("ResumeSkills", b =>
                {
                    b.Property<int>("resumesId")
                        .HasColumnType("int");

                    b.Property<int>("skillsId")
                        .HasColumnType("int");

                    b.HasKey("resumesId", "skillsId");

                    b.HasIndex("skillsId");

                    b.ToTable("ResumeSkills");
                });

            modelBuilder.Entity("CertificateResume", b =>
                {
                    b.HasOne("IK_PROJE.Entity.Entities.Concrete.Certificate", null)
                        .WithMany()
                        .HasForeignKey("certificatesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IK_PROJE.Entity.Entities.Concrete.Resume", null)
                        .WithMany()
                        .HasForeignKey("resumesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IK_PROJE.Entity.Entities.Concrete.Application", b =>
                {
                    b.HasOne("IK_PROJE.Entity.Entities.Concrete.JobPost", "JobPost")
                        .WithMany("Applications")
                        .HasForeignKey("JobPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IK_PROJE.Entity.Entities.Concrete.Resume", "Resume")
                        .WithMany("Applications")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobPost");

                    b.Navigation("Resume");
                });

            modelBuilder.Entity("IK_PROJE.Entity.Entities.Concrete.JobPost", b =>
                {
                    b.HasOne("IK_PROJE.Entity.Entities.Concrete.Company", "Company")
                        .WithMany("JobPosts")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("IK_PROJE.Entity.Entities.Concrete.MyUser", b =>
                {
                    b.HasOne("IK_PROJE.Entity.Entities.Concrete.Role", "roles")
                        .WithMany("users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("roles");
                });

            modelBuilder.Entity("IK_PROJE.Entity.Entities.Concrete.Resume", b =>
                {
                    b.HasOne("IK_PROJE.Entity.Entities.Concrete.MyUser", "User")
                        .WithMany("resumes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjectResume", b =>
                {
                    b.HasOne("IK_PROJE.Entity.Entities.Concrete.Project", null)
                        .WithMany()
                        .HasForeignKey("projectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IK_PROJE.Entity.Entities.Concrete.Resume", null)
                        .WithMany()
                        .HasForeignKey("resumesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ReferenceResume", b =>
                {
                    b.HasOne("IK_PROJE.Entity.Entities.Concrete.Reference", null)
                        .WithMany()
                        .HasForeignKey("referencesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IK_PROJE.Entity.Entities.Concrete.Resume", null)
                        .WithMany()
                        .HasForeignKey("resumesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ResumeSchool", b =>
                {
                    b.HasOne("IK_PROJE.Entity.Entities.Concrete.Resume", null)
                        .WithMany()
                        .HasForeignKey("resumesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IK_PROJE.Entity.Entities.Concrete.School", null)
                        .WithMany()
                        .HasForeignKey("schoolsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ResumeSkills", b =>
                {
                    b.HasOne("IK_PROJE.Entity.Entities.Concrete.Resume", null)
                        .WithMany()
                        .HasForeignKey("resumesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IK_PROJE.Entity.Entities.Concrete.Skills", null)
                        .WithMany()
                        .HasForeignKey("skillsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IK_PROJE.Entity.Entities.Concrete.Company", b =>
                {
                    b.Navigation("JobPosts");
                });

            modelBuilder.Entity("IK_PROJE.Entity.Entities.Concrete.JobPost", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("IK_PROJE.Entity.Entities.Concrete.MyUser", b =>
                {
                    b.Navigation("resumes");
                });

            modelBuilder.Entity("IK_PROJE.Entity.Entities.Concrete.Resume", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("IK_PROJE.Entity.Entities.Concrete.Role", b =>
                {
                    b.Navigation("users");
                });
#pragma warning restore 612, 618
        }
    }
}
